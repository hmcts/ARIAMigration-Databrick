parameters:
  pythonVersion: ''
  env: ''
  mainRepositoryName: 'ARIAMigration-Databrick'

steps:
- checkout: self
  persistCredentials: false
  clean: false
  fetchDepth: 1

#- task: AzureCLI@2
#  displayName: 'Check for Shared Func Update'
#  inputs:
#    azureSubscription: 'DTS-DATAINGEST-${{ upper(parameters.env) }}'
#    scriptType: bash
#    scriptLocation: inlineScript
#    inlineScript: |
#      # Ensure the Git history is available
#      git fetch origin
#
#      # Check if this is the first commit or no prior commit exists
#      if [ $(git rev-list --count HEAD) -le 1 ]; then
#        echo "No prior commits detected. Treating as a change."
#        echo "##vso[task.setvariable variable=shouldBuildWheel]true"
#      else
#        # Compare with the previous commit for changes in function_app.py
#        if git diff --name-only HEAD~1 | grep -q "${{ parameters.mainRepositoryName }}/AzureFunctions/function_app.py"; then
#          echo "function_app.py has changed. Rebuild required."
#          echo "##vso[task.setvariable variable=shouldBuildWheel]true"
#        else
#          echo "function_app.py has NOT changed. No rebuild required."
#          echo "##vso[task.setvariable variable=shouldBuildWheel]false"
#        fi
#      fi
#    workingDirectory: '${{ parameters.mainRepositoryName }}/'

- task: AzureCLI@2
  displayName: 'Build wheel'
#  condition: eq(variables.shouldBuildWheel, 'true')
  inputs:
    azureSubscription: 'DTS-DATAINGEST-${{ upper(parameters.env) }}'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Installing required tools..."
      pip install --upgrade pip build
      
      echo "Current directory: $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib"
      ls -la $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib

      echo "Building the Python wheel..."
      python${{ parameters.pythonVersion }} -m build --wheel

      echo "Contents of the dist directory after build:"
      ls $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib/dist || echo "No dist directory found."

      echo "Moving wheel from temporary directories to dist if necessary..."
      mkdir -p $(Pipeline.Workspace)/wheel-cache
      find $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib/dist/ -name '*.whl' -exec cp {} $(Pipeline.Workspace)/wheel-cache/ \;

      echo "Checking for wheels in wheel-cache..."
      if ls $(Pipeline.Workspace)/wheel-cache/*.whl 1> /dev/null 2>&1; then
          echo "Preparing wheel for artifact storage..."
          cp $(Pipeline.Workspace)/wheel-cache/*.whl $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib/dist/
      else
          echo "No wheel found to publish."
      fi

      echo "Final contents of the dist directory:"
      ls $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib/dist || echo "No dist directory found."
    workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib'

- publish: '$(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}/Databricks/SharedFunctionsLib/dist'
  artifact: python-wheel
  displayName: 'Publish Python Wheel to Artifact Storage'
