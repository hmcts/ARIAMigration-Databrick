trigger:
  branches:
    include:
      - master 

pool:
  vmImage: 'ubuntu-latest' 

variables:
  - name: env
    value: 'sandbox'
  - name: DATABRICKS_HOST_WORKSPACE_MAIN00
    value: 'https://adb-3635282203417052.12.azuredatabricks.net'
  - name: DATABRICKS_HOST_WORKSPACE_MAIN01
    value: 'https://adb-376876256300083.3.azuredatabricks.net/'
  - name: DATABRICKS_HOST_WORKSPACE_MAIN02
    value: 'https://adb-1879076228317698.18.azuredatabricks.net'

stages:
- stage: 'Build'
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Run Build and deploy'
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.x'
      inputs:
        versionSpec: '3.x'

    - script: |
        python -m pip install --upgrade pip
        pip install databricks-cli
      displayName: 'Install Databricks CLI'

    # Configure and deploy to Workspace MAIN00
    - script: |
        echo "[DEFAULT]" > $(HOME)/.databrickscfg
        echo "host = $(DATABRICKS_HOST_WORKSPACE_MAIN00)" >> $(HOME)/.databrickscfg
        echo "token = $(DATABRICKS_TOKEN_WORKSPACE_MAIN00)" >> $(HOME)/.databrickscfg
      displayName: 'Configure Databricks CLI for Workspace MAIN00'

    - script: |
        databricks workspace delete /live --recursive 
        databricks workspace mkdirs /live
        databricks workspace import_dir Databricks /live --overwrite
      displayName: 'Publish Databricks folder to /live in Databricks MAIN00 Workspace'

    # Configure and deploy to Workspace MAIN01
    - script: |
        echo "[DEFAULT]" > $(HOME)/.databrickscfg
        echo "host = $(DATABRICKS_HOST_WORKSPACE_MAIN01)" >> $(HOME)/.databrickscfg
        echo "token = $(DATABRICKS_TOKEN_WORKSPACE_MAIN01)" >> $(HOME)/.databrickscfg
      displayName: 'Configure Databricks CLI for Workspace MAIN01'

    - script: |
        databricks workspace delete /live --recursive
        databricks workspace mkdirs /live
        databricks workspace import_dir Databricks /live --overwrite
      displayName: 'Publish Databricks folder to /live in Databricks MAIN01 Workspace'

    # Configure and deploy to Workspace MAIN02
    - script: |
        echo "[DEFAULT]" > $(HOME)/.databrickscfg
        echo "host = $(DATABRICKS_HOST_WORKSPACE_MAIN02)" >> $(HOME)/.databrickscfg
        echo "token = $(DATABRICKS_TOKEN_WORKSPACE_MAIN02)" >> $(HOME)/.databrickscfg
      displayName: 'Configure Databricks CLI for Workspace MAIN02'

    - script: |
        databricks workspace delete /live --recursive
        databricks workspace mkdirs /live
        databricks workspace import_dir Databricks /live --overwrite
      displayName: 'Publish Databricks folder to /live in Databricks MAIN02 Workspace'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/Databricks/SharedFunctionsLib/dist'
        ArtifactName: 'ariafunction'
        publishLocation: 'Container'
      displayName: 'Publish Wheel Artifact'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/Databricks/SharedFunctionsLib/requirements.txt'
        ArtifactName: 'pythondependencies'
        publishLocation: 'Container'
      displayName: 'Publish Python Packages Artifact'

- stage: 'Deploy'
  displayName: 'Deploy Stage'
  jobs:
  - job: DownloadingArtifacts
    displayName: 'Run Build and deploy'
    steps:

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'ariafunction'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: 'Download wheel Artifact'

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'pythondependencies'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: 'Download Python Libraries Artifact'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.x'
      inputs:
        versionSpec: '3.x'

    - script: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          
          brew install databricks/tap/databricks
          databricks --version
      displayName: 'Install Databricks CLI'

      #Ensure databrcks CLI is available in current session (loading homebrew shell)
    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"  
        databricks --version  
        echo "[DEFAULT]" > $(HOME)/.databrickscfg
        echo "host = $(DATABRICKS_HOST_WORKSPACE_MAIN02)" >> $(HOME)/.databrickscfg
        echo "token = $(DATABRICKS_TOKEN_WORKSPACE_MAIN02)" >> $(HOME)/.databrickscfg
        cat ~/.databrickscfg  # Print the contents for debugging
      displayName: 'Configure Databricks CLI for Workspace MAIN02'

    - script: |
        set -e 

        WHEEL_FILE=$(find '$(Pipeline.Workspace)' -name "*.whl" | tail -n 1)

        if [ -n "$WHEEL_FILE" ]; then
          echo "Found wheel file: $WHEEL_FILE"

          FILENAME=$(basename "$WHEEL_FILE")
          echo "Extracted filename: $FILENAME"
  
          DEST_PATH="dbfs:/FileStore/shared_wheels/ariafunctions-0.0.1-py3-none-any.whl"
          echo "Destination path: $DEST_PATH"

          echo "copying wheel file to DBFS..."
          echo "copying $WHEEL_FILE to $DEST_PATH"
          databricks fs cp "$WHEEL_FILE" "$DEST_PATH" --overwrite --debug

          echo "Listing files in $(workspacePath)/"

          if [ $? -eq 0 ]; then
            echo "Wheel file uploaded successfully to $(workspacePath)/"
            exit 0
          else
            echo "No wheel files found!"
            exit 1
          fi
        else
          echo "No wheel file found"
          exit 1
        fi
      displayName: 'Upload Wheel to Databricks DBFS'
  
    - script: |
        echo "Current dir: $(pwd)"
        ls -al /home/vsts/work/1/s
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" 

        # copy artifact to databricks workspace

        cd ARIA_DABs

        echo "Current dir: $(pwd)"
        ls -al  

        databricks bundle destroy -t sandbox 
        databricks bundle validate -t sandbox --debug
        databricks bundle deploy -t sandbox --debug
      displayName: "Deploy Databricks resources to ingest02 workspace"

# how to dynamically pull out cluster id
#         echo "Installing Python packages on cluster ID: $(databricksClusterId)"
#        databricks fs cp dbfs:/FileStore/dependencies/requirements.txt requirements.txt
#        pip install -r requirements.txt
# databricks bundle run -t sandbox 
