parameters:
  pythonVersion: ''
  env: ''
  mainRepositoryName: 'ARIAMigration-Databrick'

steps:
- checkout: self
  clean: false

#- task: AzureCLI@2
#  displayName: 'Check for Shared Func Update'
#  inputs:
#    azureSubscription: 'DTS-DATAINGEST-${{ upper(parameters.env) }}'
#    scriptType: bash
#    scriptLocation: inlineScript
#    inlineScript: |
#      # Ensure the Git history is available
#      git fetch origin
#
#      # Check if this is the first commit or no prior commit exists
#      if [ $(git rev-list --count HEAD) -le 1 ]; then
#        echo "No prior commits detected. Treating as a change."
#        echo "##vso[task.setvariable variable=shouldBuildWheel]true"
#      else
#        # Compare with the previous commit for changes in function_app.py
#        if git diff --name-only HEAD~1 | grep -q "${{ parameters.mainRepositoryName }}/AzureFunctions/function_app.py"; then
#          echo "function_app.py has changed. Rebuild required."
#          echo "##vso[task.setvariable variable=shouldBuildWheel]true"
#        else
#          echo "function_app.py has NOT changed. No rebuild required."
#          echo "##vso[task.setvariable variable=shouldBuildWheel]false"
#        fi
#      fi
#    workingDirectory: '${{ parameters.mainRepositoryName }}/'

- task: AzureCLI@2
  displayName: 'Build wheel'
#  condition: eq(variables.shouldBuildWheel, 'true')
  inputs:
    azureSubscription: 'DTS-DATAINGEST-${{ upper(parameters.env) }}'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      pip install --upgrade pip build
      ls $(System.DefaultWorkingDirectory)/${{ parameters.mainRepositoryName }}
      python${{ parameters.pythonVersion }} -m build --wheel
      mkdir -p $(Pipeline.Workspace)/wheel-cache
      cp dist/*.whl $(Pipeline.Workspace)/wheel-cache/
      if [ -f $(Pipeline.Workspace)/wheel-cache/common_functions-*.whl ]; then
          echo "Preparing wheel for artifact storage..."
          cp $(Pipeline.Workspace)/wheel-cache/common_functions-*.whl dist/
      else
          echo "No wheel found to publish."
      fi
    workingDirectory: '${{ parameters.mainRepositoryName }}/'

- publish: dist
#  condition: eq(variables.shouldBuildWheel, 'true')
  artifact: python-wheel
  displayName: 'Publish Python Wheel to Artifact Storage'
